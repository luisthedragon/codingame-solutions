import sys
import math

# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.

already_used_boost = False

# game loop
while True:
    # next_checkpoint_x: x position of the next check point
    # next_checkpoint_y: y position of the next check point
    # next_checkpoint_dist: distance to the next checkpoint
    # next_checkpoint_angle: angle between your pod orientation and the direction of the next checkpoint
    x, y, next_checkpoint_x, next_checkpoint_y, next_checkpoint_dist, next_checkpoint_angle = [int(i) for i in input().split()]
    opponent_x, opponent_y = [int(i) for i in input().split()]

    # Write an action using print
    # To debug: print("Debug messages...", file=sys.stderr, flush=True)


    # You have to output the target position
    # followed by the power (0 <= thrust <= 100)
    # i.e.: "x y thrust"

    # El siguiente codigo no funciona
    # if first_action:
    #     print(str(next_checkpoint_x) + " " + str(next_checkpoint_y) + " BOOST")
    #     first_action = False
    #     continue

    if next_checkpoint_angle > 90 or next_checkpoint_angle < -90 or next_checkpoint_dist < 500:
        thrust = 10
    else:
        if not already_used_boost and next_checkpoint_dist > 5000 and abs(next_checkpoint_angle) < 10:
            # USE BOOST
            print(str(next_checkpoint_x) + " " + str(next_checkpoint_y) + " BOOST")
            already_used_boost = True
            continue
        thrust = 100

    print("Debug messages...", file=sys.stderr, flush=True)
    print(x, y, next_checkpoint_x, next_checkpoint_y, next_checkpoint_dist, next_checkpoint_angle, file=sys.stderr, flush=True)

    print(str(next_checkpoint_x) + " " + str(next_checkpoint_y) + " " + str(thrust))
        
